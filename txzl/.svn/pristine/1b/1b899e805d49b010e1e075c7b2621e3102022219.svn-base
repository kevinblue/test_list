<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<script type="text/javascript">
	jQuery(function() {
		//获取父页面中保存在hidden域的值
		var showTools = true;
		if ('${param.isView}' == 'true' || isViewHistoryTask == true) {
			showTools = false;
		}
		;
		seajs
				.use(
						[ "js/apcomponent/aptable/aptable.js" ],
						function(ApTable) {
							new ApTable(
									{
										id : "put_current",
										renderTo : "id_table_put_current",
										width : globalClientWidth - 10,
										height : 300,
										editFormPopupWindowWidth : 600,
										lazyLoad : false,
										isClickLoad : false,
										title : "",
										remoteOper : false,
										showPager : false,
										showToolbar : showTools,
										multiSelect : true,
										tools : [ 'edit', '-', 'copy', '-',
												'remove' ],
										validateForm : function(miniTable,
												miniForm) {
											var comparemoney = getMiniEditFormField(
													"put_current.comparemoney")
													.getValue();
											var factmoney = getMiniEditFormField(
													"put_current.factmoney")
													.getValue();
											comparemoney = parseFloat(
													comparemoney).toFixed(2);
											factmoney = parseFloat(factmoney)
													.toFixed(2);
											if (parseFloat(comparemoney) < parseFloat(factmoney)) {
												mini
														.alert("本次付款金额不能大于计划可付款金额!("
																+ comparemoney
																+ ")");
												return false;
											}
											var purpose = getMiniEditFormField(
													"put_current.purpose")
													.getValue();
											if (getLength(purpose) > 25) {
												mini
														.alert("支付用途不能超过25个字符或8个汉字");
												return false;
											}
											var clientaccnum = getMiniEditFormField(
													"put_current.clientaccnumber")
													.getValue();
											if (clientaccnum == ""
													|| clientaccnum == null) {
												mini.alert("对方收款账号不能为空！");
												return false;
											}
											var bankshortname = getMiniEditFormField(
													"put_current.depositbanktype")
													.getValue();
											if (bankshortname == ""
													|| bankshortname == null) {
												mini.alert("收款方银行简称不能为空！");
												return false;
											}

											return true;
										},
										updateOperCallBack : function(
												miniTable, rowData) {
											var datas = miniTable.getData();//获取所有对象
											if (rowData.settlemethod == "payfund6") {
												for (var i = 0; i < datas.length; i++) {
													if (datas[i].paymentid == rowData.paymentid
															&& datas[i].settlemethod == "payfund11") {
														datas[i].accountingdate = rowData.accountingdate;
														datas[i].accountbankname = rowData.accountbankname;
														datas[i].accountbank = rowData.accountbank;
														datas[i].account = rowData.account;
														datas[i].accnumber = rowData.accnumber;
														datas[i].clientbank = rowData.clientbank;
														datas[i].clientaccount = rowData.clientaccount;
														datas[i].clientaccnumber = rowData.clientaccnumber;
														datas[i].memo = rowData.memo;
														datas[i].memoname = rowData.memoname;
													}
												}
											}
											miniTable.setData(datas);
										},
										removeOperCallBack : function(
												miniTable, rowDatas) {
											var guarantable = mini
													.get("premise_condition");
											var guarantableData = guarantable
													.getData();
											for (j = 0; j < rowDatas.length; j++) {
												var paymentid = rowDatas[j].paymentid;
												var feetype = rowDatas[j].feetype;
												for (var i = 0; i < guarantableData.length; i++) {
													var paymentidTmp = guarantableData[i].paymentid
															.replace(
																	/[^0-9]/ig,
																	"");//去除所有字符串只取数字
													if (paymentid == paymentidTmp
															&& feetype == guarantableData[i].feetype) {
														guarantable
																.removeRow(guarantableData[i]);
													}
												}
											}
											return true;
										},
										data : JsonUtil
												.decode('${empty json_put_current_str ? "[]" : json_put_current_str }'),
										columns : [
												{
													type : 'indexcolumn'
												},
												{
													type : 'checkcolumn'
												},
												{
													field : 'id',
													header : 'id',
													visible : false
												},
												{
													field : 'pid',
													header : 'pid',
													visible : false
												},
												{
													field : 'feetype',
													header : '费用类型',
													formEditorConfig : {},
													visible : false
												},
												{
													field : 'feetypename',
													header : '费用类型',
													formEditorConfig : {
														readOnly : true
													}
												},
												{
													field : 'devicename1',
													header : '设备名称',
													formEditorConfig : {
														fieldVisible : true
													}
												},
												//款项节点
												{
													field : 'fundtype',
													header : '款项节点',
													formEditorConfig : {},
													visible : false
												},
												{
													field : 'fundtypename',
													header : '款项节点',
													formEditorConfig : {
														readOnly : true,
														newLine : true
													}
												},
												{
													field : 'factmoney',
													header : '付款金额',
													summary : true,
													dataType : "currency",
													formEditorConfig : {
														newLine : false,
														vtype : "float",
														required : true
													}
												},
												{
													field : 'settlemethod',
													header : '结算方式',
													visible : false,
													formEditorConfig : {
														newLine : true,
														type : 'queryinput',
														required : true,
														textField : 'name',
														valueField : 'value',
														allowInput : false,
														fieldVisible : true,
														onSelect : function(
																$me,
																queryInput,
																rowData) {
															mini
																	.get(
																			"put_current_editFormPopupWindow_form_billnum")
																	.disable(
																			true);
															if ("银行承兑汇票" == rowData.name
																	|| "商业承兑汇票" == rowData.name) {
																mini
																		.get(
																				"put_current_editFormPopupWindow_form_billnum")
																		.enable(
																				true);
															}
														},
														params : {
															pid : 'PayFund',
															xmlFileName : 'combos/comboDict.xml'
														}
													}
												},
												{
													field : 'settlemethodname',
													header : '结算方式',
													formEditorConfig : {
														fieldVisible : false,
														fillFromFieldName : 'settlemethod',
														fillProperty : 'name'
													}
												},
												{
													field : 'factobjectname',
													header : '支付对象',
													width : 150,
													formEditorConfig : {
														fieldVisible : false
													}
												},
												{
													field : 'factobject',
													header : '支付对象',
													visible : false,
													formEditorConfig : {
														newLine : false,
														type : 'queryinput',
														required : true,
														textField : 'name',
														valueField : 'name',
														allowInput : false,
														fieldVisible : true,
														onSelect : function(
																combo, rowData) {
															var rowDatas = combo
																	.getSelectedOptionData();
															var customer = rowDatas.customertypename;
															var customertype = rowDatas.customertype;
															var objid = rowDatas.value;
															mini
																	.getbyName(
																			"factobjectid")
																	.setValue(
																			objid);
															if (customertype == "") {
																getMiniEditFormField(
																		"put_current.customertype")
																		.setValue(
																				"1");
															} else {
																getMiniEditFormField(
																		"put_current.customertype")
																		.setText(
																				customer);
																getMiniEditFormField(
																		"put_current.customertype")
																		.setValue(
																				customertype);
																getMiniEditFormField(
																		"put_current.customertypename")
																		.setValue(
																				customer);
															}
															clearCustbank();
														},
														params : {
															xmlFileName : 'common/customertype.xml'
														}
													}
												},
												{
													field : 'factobjectid',
													header : 'factobjectid',
													visible : false,
													formEditorConfig : {
														type : 'text',
														textField : 'factobjectid',
														fieldVisible : false,
														valueField : 'factobjectid'

													}
												},
												{
													field : 'fundfundchargeplan',
													header : '付款计划',
													visible : false
												},
												{
													field : 'paymentid',
													header : '付款编号',
													formEditorConfig : {
														newLine:true,
														readOnly : true
													}
												},
												{
													field : 'comparemoney',
													header : '比较金额',
													visible : false,
													formEditorConfig : {
														readOnly : true
													}
												},

												{
													field : 'customertype',
													header : '客户类型',
													visible : false,
													formEditorConfig : {
														type : 'combobox',
														textField : 'name',
														fieldVisible : true,
														allowInput : false,
														valueField : 'value',
														params : {
															pid : 'proj_type',
															xmlFileName : '/combos/comboDict.xml'
														}
													}
												},
												{
													field : 'customertypename',
													header : '客户类型',
													visible : true,
													formEditorConfig : {
														fieldVisible : false,
														fillFromFieldName : 'customertype',
														fillProperty : 'name'
													}
												},
												{
													field : 'paytype',
													header : '支付类型',
													formEditorConfig : {
														newLine : true
													},
													visible : false
												},
												{
													field : 'paytypename',
													header : '支付类型',
													visible : false,
													formEditorConfig : {
														newLine : true,
														readOnly : true
													}
												},

												{
													field : 'billnum',
													header : '票据编号',
													visible : true,
													formEditorConfig : {
														type : 'text',
														width : 200,
														labelWidth : 100,
														readOnly : true,
														fieldVisible : true
													}
												},
												{
													field : 'factdate',
													header : '付款日期',
													formEditorConfig : {
														newLine : true,
														type : 'date'
													}
												},
												{
													field : 'accountingdate',
													header : '会计处理日',
													formEditorConfig : {
														type : 'date',
														required : true
													}
												},
												{
													field : 'accountbankname',
													header : '对方银行',
													visible : false,
													formEditorConfig : {
														fillFromFieldName : 'accountbank',
														fillProperty : 'accbank'
													}
												},
												/* {field: 'accountbank', header: '本方银行',
													formEditorConfig:
													{
														newLine:true,
														type : 'combobox', 
														multiSelect : false, 
														valueField : 'accbank', 
														textField : 'memo', 
														labelWidth : 100, 
														width : 200, 
														params : {
															xmlFileName : 'eleasing/jsp/sysmgr/sysdatamgr/ownaccountinfo.xml'
														   
														}
													}
												}, */
												{
													field : 'memoname',
													header : '本方账户别名',
													visible : false
												},
												{
													field : 'memo',
													header : '本方账户别名',
													visible : false,
													formEditorConfig : {
														type : 'queryinput',
														labelWidth : 100,
														newLine : true,
														multiSelect : false,
														fieldVisible : true,
														required : true,
														readOnly : false,
														valueField : 'accbank',
														textField : 'memoname',
														onSelect : function(
																$me, inputObj,
																rowData) {
															mini
																	.getbyName(
																			"account")
																	.setValue(
																			rowData.accname);
															mini
																	.getbyName(
																			"accnumber")
																	.setValue(
																			rowData.accnumber);
															mini
																	.getbyName(
																			"accountbank")
																	.setValue(
																			rowData.accbank);
															mini
																	.getbyName(
																			"memoname")
																	.setValue(
																			rowData.memoname);

														},
														params : {
															xmlFileName : 'eleasing/jsp/sysmgr/sysdatamgr/ownaccountinfo.xml'
														/* userid:'${sessionScope.loginUser.id}', */
														//applydate:applydate /*关联省份内容*/
														}
													}
												},
												{
													field : 'accountbank',
													header : '本方银行',
													width : 150,
													formEditorConfig : {
														readonly : true
													}
												},
												{
													field : 'account',
													header : '本方账户',
													width : 150,
													formEditorConfig : {
														/* fillFromFieldName : 'accountbank',
														fillProperty : 'accname', */
														newLine : true,
														readonly : true
													}
												},
												{
													field : 'accnumber',
													header : '本方账号',
													width : 150,
													formEditorConfig : {
														/* fillFromFieldName : 'accountbank',
														fillProperty : 'accnumber', */
														readonly : true
													}
												},
												{
													field : 'clientbankname',
													header : '对方银行',
													visible : false,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'clientbank'
													}
												},
												{
													field : 'clientbank',
													header : '对方银行',
													width : 150,
													formEditorConfig : {
														newLine : true,
														type : 'combobox',
														required : true,
														multiSelect : false,
														valueField : 'clientbank',
														textField : 'clientbank',
														labelWidth : 100,
														width : 200,
														//onclick:'initCustbank',
														onbuttonclick : 'initCustbank',
														//onbeforeshowpopup:'initCustbank',
														lazyLoad : true,
														params : {
															xmlFileName : 'common/custbankInfo.xml',
															custname : 'xxxxx'
														}
													}
												},

												//账户名称
												{
													field : 'clientaccount',
													header : '对方账户',
													width : 150,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'clientaccount',
														readonly : true
													}
												},
												{
													field : 'clientaccnumber',
													header : '对方账号',
													width : 150,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'clientaccnumber',
														readonly : true,
														newLine : true,
														colspan : 1
													}
												},
												//银行行号--
												{
													field : 'clientbankno',
													header : '银行行号',
													width : 150,
													visible : true,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'clientbankno',
														readonly : true
													}
												},
												//银行简称--
												{
													field : 'depositbanktype',
													header : '对方银行简称',
													width : 150,
													visible : true,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'depositbanktype',
														newLine : true,
														required : true,
														readonly : true
													}
												},
												//银联号--
												{
													field : 'unionclientbankno',
													header : '银联号',
													width : 150,
													visible : true,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'unionclientbankno',
														readonly : true
													}
												},
												//开户行省--
												{
													field : 'depositprovince',
													header : '开户行省',
													width : 150,
													visible : true,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'depositprovince',
														newLine : true,
														readonly : true
													}
												},
												//开户行市--
												{
													field : 'depositcity',
													header : '开户行市',
													width : 150,
													visible : true,
													formEditorConfig : {
														fillFromFieldName : 'clientbank',
														fillProperty : 'depositcity',
														readonly : true
													}
												}, {
													field : 'purpose',
													header : '用途',
													width : 150,
													visible : true,
													formEditorConfig : {
														required : true,
														newLine : true
													}
												}, {
													field : 'priorityflag',
													header : '加急标识',
													width : 150,
													visible : true,
													formEditorConfig : {
														showNullItem : true,
														visible : true,
														type : 'combobox',
														textField : 'text',
														valueField : 'id',
														data : [ {
															id : 'Y',
															text : 'Y'
														}, {
															id : 'N',
															text : 'N'
														} ]
													}
												}, {
													field : 'ffcmemo',
													header : '备注',
													formEditorConfig : {
														type : 'textarea',
														newLine : true,
														colspan : 3,
														width : 400,
														height : 70
													}
												}

										]
									});
						});

	});
	function initCustbank() {
		var factobj = getMiniEditFormField("put_current.factobject");
		var clientbank = getMiniEditFormField("put_current.clientbank");
		fact = factobj.getText();
		if (fact == "") {
			mini.alert("请选择付款对象");
			return false;
		}
		var param = {};
		param["custname"] = fact;
		param["xmlFileName"] = "common/custbankInfo.xml", seajs.use(
				[ "js/apcomponent/aputil/aputil.js" ], function(ApUtil) {
					ApUtil.setComboxParams(clientbank, param);
				});
	}
	function checkFundPutInfo() {
		var chargeData = mini.get("put_current").getData()
		if (put_current.length == 0) {
			mini.alert("本次付款明细不能为空!");
			return false;
		}
	}
	function clearCustbank() {
		getMiniEditFormField("put_current.clientaccount").setValue("");
		getMiniEditFormField("put_current.clientaccnumber").setValue("");
		getMiniEditFormField("put_current.clientbank").setValue("");
		getMiniEditFormField("put_current.clientbank").setText("");
	}
	//检查抵扣的金额和被抵扣金额是不是一样
	function CheckDecdueMoney() {
		var payData = mini.get("put_current").getData();
		var fundData = mini.get("caution_money_refund_detail").getData();
		var rentData = mini.get("rent_income_detail").getData();
		if (payData.length > 0) {
			for (var i = 0; i < payData.length; i++) {
				for (var j = 0; j < fundData.length; j++) {
					if (payData[i].pid == fundData[j].fundfundchargeplan
							&& (parseFloat(payData[i].factmoney) != parseFloat(fundData[j].factmoney))) {
						mini.alert("设备款(" + payData[i].factmoney + ")与被抵扣的"
								+ fundData[j].feetypename + "("
								+ fundData[j].factmoney + ")不一样");
						return false;
					}
				}
				for (var h = 0; h < rentData.length; h++) {
					if (payData[i].pid == rentData[h].planid
							&& (parseFloat(payData[i].factmoney) != parseFloat(rentData[h].rent))) {
						mini.alert("设备款(" + payData[i].factmoney + ")与被抵扣的租金("
								+ rentData[h].rent + ")不一样");
						return false;
					}
				}
			}
			return true;
		} else {
			return true;
		}
	}

	function getLength(str) {
		var realLength = 0;
		for (var i = 0; i < str.length; i++) {
			charCode = str.charCodeAt(i);
			if (charCode >= 0 && charCode <= 128)
				realLength += 1;
			else
				realLength += 3;
		}
		return realLength;
	}
</script>
<div id="id_table_put_current"></div>
