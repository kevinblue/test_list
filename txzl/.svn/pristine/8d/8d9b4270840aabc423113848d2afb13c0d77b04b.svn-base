package com.tenwa.leasing.action.proj.proj_factoring;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Component;

import com.tenwa.business.service.BaseService;
import com.tenwa.jbpm.action.JbpmBaseAction;
import com.tenwa.jbpm.entity.JBPMWorkflowHistoryInfo;
import com.tenwa.kernal.annotation.WorkflowAction;
import com.tenwa.kernal.utils.DateUtil;
import com.tenwa.kernal.utils.SecurityUtil;
import com.tenwa.leasing.entity.proj.ProjDevelopInfo;
import com.tenwa.leasing.entity.trade.TradeBasedTransactions;
import com.tenwa.leasing.service.Proj.projApproval.ProjApprovalService;
import com.tenwa.leasing.utils.WorkflowUtil;

/**
 * 
 * @author admin
 * @date 2016-11-15
 * @info项目立项的Action
 * @Copyright 
 * Tenwa
 */
@WorkflowAction(name = "projFactoringEndAction", description = "流程结束动作", workflowName = "保理业务立项")
@Component(value = "projFactoringEndAction")
public class ProjFactoringEndAction implements JbpmBaseAction {
	@Resource(name = "baseService")
	private BaseService baseService;
	
	@Resource(name = "projApprovalService")
	private ProjApprovalService projApprovalService;
	
	@Override
	public void start(HttpServletRequest request, Map<String, String> variablesMap,JBPMWorkflowHistoryInfo jbpmWorkflowHistoryInfo) throws Exception {
		 
	}
	
	@Override
	public String delete(HttpServletRequest request, Map<String, String> variablesMap,JBPMWorkflowHistoryInfo jbpmWorkflowHistoryInfo) throws Exception {
		return null;
	}

	@Override
	public void end(HttpServletRequest request, Map<String, String> variablesMap,JBPMWorkflowHistoryInfo jbpmWorkflowHistoryInfo) throws Exception {
		String proj_id = variablesMap.get("proj_id");
		ProjDevelopInfo pdi = this.baseService.findEntityByID(ProjDevelopInfo.class, proj_id);
		Map<String, Object> propertiesMap = new HashMap<String,Object>();
		propertiesMap.put("projId", pdi);
		List<TradeBasedTransactions> list = this.baseService.findEntityByProperties(TradeBasedTransactions.class, propertiesMap);
		if(list.size() >0)
		{
			TradeBasedTransactions tbt = list.get(0);
			tbt.setSale(variablesMap.get("trade_based_transactions.sale"));
			tbt.setContractpaymentterm(variablesMap.get("trade_based_transactions.contractpaymentterm"));
			tbt.setPaymentcondition(variablesMap.get("trade_based_transactions.paymentcondition"));
			tbt.setPaymentmode(variablesMap.get("trade_based_transactions.paymentmode"));
			tbt.setAssignmentclause(variablesMap.get("trade_based_transactions.assignmentclause"));
			tbt.setLongcontract(variablesMap.get("trade_based_transactions.longcontract"));
			tbt.setTradevolume(variablesMap.get("trade_based_transactions.tradevolume"));
			tbt.setRelationbusiness(variablesMap.get("trade_based_transactions.relationbusiness"));
			tbt.setFactoringaccount(variablesMap.get("trade_based_transactions.factoringaccount"));
			tbt.setActualtransaction(variablesMap.get("trade_based_transactions.actualtransaction"));
			tbt.setTradesituation(variablesMap.get("trade_based_transactions.tradesituation"));
			tbt.setFinancingsituation(variablesMap.get("trade_based_transactions.financingsituation"));
			tbt.setModifyDate(DateUtil.getSystemDateTime());
			tbt.setModificator(SecurityUtil.getPrincipal());
			this.baseService.updateEntity(tbt);
		}else{
			TradeBasedTransactions trade = new TradeBasedTransactions();
			trade.setProjId(pdi);
			trade.setSale(variablesMap.get("trade_based_transactions.sale"));
			trade.setContractpaymentterm(variablesMap.get("trade_based_transactions.contractpaymentterm"));
			trade.setPaymentcondition(variablesMap.get("trade_based_transactions.paymentcondition"));
			trade.setPaymentmode(variablesMap.get("trade_based_transactions.paymentmode"));
			trade.setAssignmentclause(variablesMap.get("trade_based_transactions.assignmentclause"));
			trade.setLongcontract(variablesMap.get("trade_based_transactions.longcontract"));
			trade.setTradevolume(variablesMap.get("trade_based_transactions.tradevolume"));
			trade.setRelationbusiness(variablesMap.get("trade_based_transactions.relationbusiness"));
			trade.setFactoringaccount(variablesMap.get("trade_based_transactions.factoringaccount"));
			trade.setActualtransaction(variablesMap.get("trade_based_transactions.actualtransaction"));
			trade.setTradesituation(variablesMap.get("trade_based_transactions.tradesituation"));
			trade.setFinancingsituation(variablesMap.get("trade_based_transactions.financingsituation"));
			trade.setCreator(SecurityUtil.getPrincipal());
			trade.setCreateDate(DateUtil.getSystemDateTime());
			this.baseService.saveEntity(trade);
		}
		//删除流程互斥
		WorkflowUtil.deleteWorkFlowConflict(this.baseService, variablesMap);  
		projApprovalService.saveFactoringProjectInfo(variablesMap);
	}

	@Override
	public String save(HttpServletRequest request, Map<String, String> variablesMap,JBPMWorkflowHistoryInfo jbpmWorkflowHistoryInfo) throws Exception {
		return null;
	}
	
	@Override
	public void back(HttpServletRequest request,
			Map<String, String> variablesMap,JBPMWorkflowHistoryInfo jbpmWorkflowHistoryInfo) throws Exception {
	}
}
